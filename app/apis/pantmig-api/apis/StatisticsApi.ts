/* tslint:disable */
/* eslint-disable */
/**
 * PantmigService API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CityStatisticsResult,
  DonorStatisticsResult,
  RecyclerStatisticsResult,
} from '../models/index';
import {
    CityStatisticsResultFromJSON,
    CityStatisticsResultToJSON,
    DonorStatisticsResultFromJSON,
    DonorStatisticsResultToJSON,
    RecyclerStatisticsResultFromJSON,
    RecyclerStatisticsResultToJSON,
} from '../models/index';

export interface StatisticsCityRequest {
    city: string;
}

/**
 * 
 */
export class StatisticsApi extends runtime.BaseAPI {

    /**
     * Open endpoint. Supply city name (case-insensitive). Returns material breakdown and total approximate worth for completed listings in that city.
     * Get city-based recycling statistics
     */
    async statisticsCityRaw(requestParameters: StatisticsCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityStatisticsResult>> {
        if (requestParameters['city'] == null) {
            throw new runtime.RequiredError(
                'city',
                'Required parameter "city" was null or undefined when calling statisticsCity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['city'] != null) {
            queryParameters['city'] = requestParameters['city'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/statistics/city`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CityStatisticsResultFromJSON(jsonValue));
    }

    /**
     * Open endpoint. Supply city name (case-insensitive). Returns material breakdown and total approximate worth for completed listings in that city.
     * Get city-based recycling statistics
     */
    async statisticsCity(requestParameters: StatisticsCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityStatisticsResult> {
        const response = await this.statisticsCityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns count of completed listings donated, total items, and total approximate worth.
     * Get donor statistics for current user
     */
    async statisticsDonorRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DonorStatisticsResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/statistics/donor`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DonorStatisticsResultFromJSON(jsonValue));
    }

    /**
     * Returns count of completed listings donated, total items, and total approximate worth.
     * Get donor statistics for current user
     */
    async statisticsDonor(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DonorStatisticsResult> {
        const response = await this.statisticsDonorRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns count of completed pickups, total items recycled, material breakdown, approximate worth, and total reported amount.
     * Get recycler statistics for current user
     */
    async statisticsRecyclerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecyclerStatisticsResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/statistics/recycler`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecyclerStatisticsResultFromJSON(jsonValue));
    }

    /**
     * Returns count of completed pickups, total items recycled, material breakdown, approximate worth, and total reported amount.
     * Get recycler statistics for current user
     */
    async statisticsRecycler(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecyclerStatisticsResult> {
        const response = await this.statisticsRecyclerRaw(initOverrides);
        return await response.value();
    }

}
