/* tslint:disable */
/* eslint-disable */
/**
 * PantmigService API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CitySearchResult,
} from '../models/index';
import {
    CitySearchResultFromJSON,
    CitySearchResultToJSON,
} from '../models/index';

export interface CitiesSearchRequest {
    q?: string;
    take?: number;
}

/**
 * 
 */
export class CitiesApi extends runtime.BaseAPI {

    /**
     * Search by city name or postal code. Open to all callers.
     * Search cities for typeahead
     */
    async citiesSearchRaw(requestParameters: CitiesSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CitySearchResult>>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/cities/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CitySearchResultFromJSON));
    }

    /**
     * Search by city name or postal code. Open to all callers.
     * Search cities for typeahead
     */
    async citiesSearch(requestParameters: CitiesSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CitySearchResult>> {
        const response = await this.citiesSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
