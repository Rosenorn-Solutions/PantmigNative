/* tslint:disable */
/* eslint-disable */
/**
 * PantmigService API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcceptRequest,
  ChatStartRequest,
  CreateRecycleListingRequest,
  MeetingPointRequest,
  PickupConfirmRequest,
  PickupRequest,
  ReceiptSubmitRequest,
  ReceiptVerifyRequest,
  RecycleListing,
} from '../models/index';
import {
    AcceptRequestFromJSON,
    AcceptRequestToJSON,
    ChatStartRequestFromJSON,
    ChatStartRequestToJSON,
    CreateRecycleListingRequestFromJSON,
    CreateRecycleListingRequestToJSON,
    MeetingPointRequestFromJSON,
    MeetingPointRequestToJSON,
    PickupConfirmRequestFromJSON,
    PickupConfirmRequestToJSON,
    PickupRequestFromJSON,
    PickupRequestToJSON,
    ReceiptSubmitRequestFromJSON,
    ReceiptSubmitRequestToJSON,
    ReceiptVerifyRequestFromJSON,
    ReceiptVerifyRequestToJSON,
    RecycleListingFromJSON,
    RecycleListingToJSON,
} from '../models/index';

export interface ListingsChatStartRequest {
    chatStartRequest: ChatStartRequest;
}

export interface ListingsCreateRequest {
    createRecycleListingRequest: CreateRecycleListingRequest;
}

export interface ListingsGetByIdRequest {
    id: number;
}

export interface ListingsMeetingSetRequest {
    meetingPointRequest: MeetingPointRequest;
}

export interface ListingsPickupAcceptRequest {
    acceptRequest: AcceptRequest;
}

export interface ListingsPickupConfirmRequest {
    pickupConfirmRequest: PickupConfirmRequest;
}

export interface ListingsPickupRequestRequest {
    pickupRequest: PickupRequest;
}

export interface ListingsReceiptSubmitRequest {
    receiptSubmitRequest: ReceiptSubmitRequest;
}

export interface ListingsReceiptVerifyRequest {
    receiptVerifyRequest: ReceiptVerifyRequest;
}

/**
 * 
 */
export class RecycleListingsApi extends runtime.BaseAPI {

    /**
     * Starts a chat between the donator and the assigned recycler for the listing.
     * Start a direct chat for a listing
     */
    async listingsChatStartRaw(requestParameters: ListingsChatStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatStartRequest'] == null) {
            throw new runtime.RequiredError(
                'chatStartRequest',
                'Required parameter "chatStartRequest" was null or undefined when calling listingsChatStart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/listings/chat/start`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatStartRequestToJSON(requestParameters['chatStartRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Starts a chat between the donator and the assigned recycler for the listing.
     * Start a direct chat for a listing
     */
    async listingsChatStart(requestParameters: ListingsChatStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listingsChatStartRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new recycle listing. Requires a verified Donator.
     * Create a new listing
     */
    async listingsCreateRaw(requestParameters: ListingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createRecycleListingRequest'] == null) {
            throw new runtime.RequiredError(
                'createRecycleListingRequest',
                'Required parameter "createRecycleListingRequest" was null or undefined when calling listingsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/listings`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRecycleListingRequestToJSON(requestParameters['createRecycleListingRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new recycle listing. Requires a verified Donator.
     * Create a new listing
     */
    async listingsCreate(requestParameters: ListingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listingsCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all listings that are currently active and available.
     * Get active recycle listings
     */
    async listingsGetActiveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RecycleListing>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/listings`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecycleListingFromJSON));
    }

    /**
     * Returns all listings that are currently active and available.
     * Get active recycle listings
     */
    async listingsGetActive(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RecycleListing>> {
        const response = await this.listingsGetActiveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single recycle listing by its identifier.
     * Get a listing by id
     */
    async listingsGetByIdRaw(requestParameters: ListingsGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecycleListing>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listingsGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/listings/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecycleListingFromJSON(jsonValue));
    }

    /**
     * Retrieves a single recycle listing by its identifier.
     * Get a listing by id
     */
    async listingsGetById(requestParameters: ListingsGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecycleListing> {
        const response = await this.listingsGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Donator sets the meeting point coordinates. Requires chat to be started.
     * Set meeting point for a listing
     */
    async listingsMeetingSetRaw(requestParameters: ListingsMeetingSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['meetingPointRequest'] == null) {
            throw new runtime.RequiredError(
                'meetingPointRequest',
                'Required parameter "meetingPointRequest" was null or undefined when calling listingsMeetingSet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/listings/meeting/set`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingPointRequestToJSON(requestParameters['meetingPointRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Donator sets the meeting point coordinates. Requires chat to be started.
     * Set meeting point for a listing
     */
    async listingsMeetingSet(requestParameters: ListingsMeetingSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listingsMeetingSetRaw(requestParameters, initOverrides);
    }

    /**
     * Donator accepts a recycler\'s pickup request for the listing.
     * Accept a recycler for pickup
     */
    async listingsPickupAcceptRaw(requestParameters: ListingsPickupAcceptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['acceptRequest'] == null) {
            throw new runtime.RequiredError(
                'acceptRequest',
                'Required parameter "acceptRequest" was null or undefined when calling listingsPickupAccept().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/listings/pickup/accept`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptRequestToJSON(requestParameters['acceptRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Donator accepts a recycler\'s pickup request for the listing.
     * Accept a recycler for pickup
     */
    async listingsPickupAccept(requestParameters: ListingsPickupAcceptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listingsPickupAcceptRaw(requestParameters, initOverrides);
    }

    /**
     * Recycler confirms that the pickup has been performed.
     * Confirm pickup
     */
    async listingsPickupConfirmRaw(requestParameters: ListingsPickupConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pickupConfirmRequest'] == null) {
            throw new runtime.RequiredError(
                'pickupConfirmRequest',
                'Required parameter "pickupConfirmRequest" was null or undefined when calling listingsPickupConfirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/listings/pickup/confirm`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PickupConfirmRequestToJSON(requestParameters['pickupConfirmRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Recycler confirms that the pickup has been performed.
     * Confirm pickup
     */
    async listingsPickupConfirm(requestParameters: ListingsPickupConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listingsPickupConfirmRaw(requestParameters, initOverrides);
    }

    /**
     * Recycler requests to pick up a specific listing.
     * Request pickup for a listing
     */
    async listingsPickupRequestRaw(requestParameters: ListingsPickupRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pickupRequest'] == null) {
            throw new runtime.RequiredError(
                'pickupRequest',
                'Required parameter "pickupRequest" was null or undefined when calling listingsPickupRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/listings/pickup/request`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PickupRequestToJSON(requestParameters['pickupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Recycler requests to pick up a specific listing.
     * Request pickup for a listing
     */
    async listingsPickupRequest(requestParameters: ListingsPickupRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listingsPickupRequestRaw(requestParameters, initOverrides);
    }

    /**
     * Recycler submits the receipt image URL and reported amount for the listing.
     * Submit receipt
     */
    async listingsReceiptSubmitRaw(requestParameters: ListingsReceiptSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['receiptSubmitRequest'] == null) {
            throw new runtime.RequiredError(
                'receiptSubmitRequest',
                'Required parameter "receiptSubmitRequest" was null or undefined when calling listingsReceiptSubmit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/listings/receipt/submit`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReceiptSubmitRequestToJSON(requestParameters['receiptSubmitRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Recycler submits the receipt image URL and reported amount for the listing.
     * Submit receipt
     */
    async listingsReceiptSubmit(requestParameters: ListingsReceiptSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listingsReceiptSubmitRaw(requestParameters, initOverrides);
    }

    /**
     * Donator verifies the receipt amount reported by the recycler.
     * Verify receipt amount
     */
    async listingsReceiptVerifyRaw(requestParameters: ListingsReceiptVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['receiptVerifyRequest'] == null) {
            throw new runtime.RequiredError(
                'receiptVerifyRequest',
                'Required parameter "receiptVerifyRequest" was null or undefined when calling listingsReceiptVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/listings/receipt/verify`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReceiptVerifyRequestToJSON(requestParameters['receiptVerifyRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Donator verifies the receipt amount reported by the recycler.
     * Verify receipt amount
     */
    async listingsReceiptVerify(requestParameters: ListingsReceiptVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listingsReceiptVerifyRaw(requestParameters, initOverrides);
    }

}
