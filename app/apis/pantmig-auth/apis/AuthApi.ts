/* tslint:disable */
/* eslint-disable */
/**
 * AuthService API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthResponse,
  LoginRequest,
  LoginResult,
  RegisterRequest,
  RegisterResult,
  TokenRefreshRequest,
  UserInformationDTO,
  UserInformationResult,
  UsersLookupRequest,
  UsersLookupResult,
} from '../models/index';
import {
    AuthResponseFromJSON,
    AuthResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LoginResultFromJSON,
    LoginResultToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    RegisterResultFromJSON,
    RegisterResultToJSON,
    TokenRefreshRequestFromJSON,
    TokenRefreshRequestToJSON,
    UserInformationDTOFromJSON,
    UserInformationDTOToJSON,
    UserInformationResultFromJSON,
    UserInformationResultToJSON,
    UsersLookupRequestFromJSON,
    UsersLookupRequestToJSON,
    UsersLookupResultFromJSON,
    UsersLookupResultToJSON,
} from '../models/index';

export interface AuthGetUserByIdRequest {
    id: string;
}

export interface AuthLoginRequest {
    loginRequest: LoginRequest;
}

export interface AuthRefreshRequest {
    tokenRefreshRequest: TokenRefreshRequest;
}

export interface AuthRegisterRequest {
    registerRequest: RegisterRequest;
}

export interface AuthUsersLookupRequest {
    usersLookupRequest: UsersLookupRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Returns public profile information for a user, including rating.
     * Get user info by id
     */
    async authGetUserByIdRaw(requestParameters: AuthGetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInformationResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authGetUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/auth/users/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInformationResultFromJSON(jsonValue));
    }

    /**
     * Returns public profile information for a user, including rating.
     * Get user info by id
     */
    async authGetUserById(requestParameters: AuthGetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInformationResult> {
        const response = await this.authGetUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates a user with either email or username and returns access and refresh tokens.
     * Login with email/username and password
     */
    async authLoginRaw(requestParameters: AuthLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResult>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling authLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResultFromJSON(jsonValue));
    }

    /**
     * Authenticates a user with either email or username and returns access and refresh tokens.
     * Login with email/username and password
     */
    async authLogin(requestParameters: AuthLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResult> {
        const response = await this.authLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns basic profile information for the authenticated user.
     * Get current user info
     */
    async authMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInformationDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/auth/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInformationDTOFromJSON(jsonValue));
    }

    /**
     * Returns basic profile information for the authenticated user.
     * Get current user info
     */
    async authMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInformationDTO> {
        const response = await this.authMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Rotates the refresh token and issues a new access token.
     * Refresh access token
     */
    async authRefreshRaw(requestParameters: AuthRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['tokenRefreshRequest'] == null) {
            throw new runtime.RequiredError(
                'tokenRefreshRequest',
                'Required parameter "tokenRefreshRequest" was null or undefined when calling authRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/auth/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRefreshRequestToJSON(requestParameters['tokenRefreshRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * Rotates the refresh token and issues a new access token.
     * Refresh access token
     */
    async authRefresh(requestParameters: AuthRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.authRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new user account and returns access and refresh tokens.
     * Register a new user
     */
    async authRegisterRaw(requestParameters: AuthRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterResult>> {
        if (requestParameters['registerRequest'] == null) {
            throw new runtime.RequiredError(
                'registerRequest',
                'Required parameter "registerRequest" was null or undefined when calling authRegister().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/auth/register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterResultFromJSON(jsonValue));
    }

    /**
     * Creates a new user account and returns access and refresh tokens.
     * Register a new user
     */
    async authRegister(requestParameters: AuthRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterResult> {
        const response = await this.authRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns ratings for a list of user ids to reduce round-trips. Uses in-memory cache for faster responses.
     * Batch lookup users\' ratings
     */
    async authUsersLookupRaw(requestParameters: AuthUsersLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersLookupResult>> {
        if (requestParameters['usersLookupRequest'] == null) {
            throw new runtime.RequiredError(
                'usersLookupRequest',
                'Required parameter "usersLookupRequest" was null or undefined when calling authUsersLookup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }


        let urlPath = `/auth/users/lookup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UsersLookupRequestToJSON(requestParameters['usersLookupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersLookupResultFromJSON(jsonValue));
    }

    /**
     * Returns ratings for a list of user ids to reduce round-trips. Uses in-memory cache for faster responses.
     * Batch lookup users\' ratings
     */
    async authUsersLookup(requestParameters: AuthUsersLookupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersLookupResult> {
        const response = await this.authUsersLookupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
